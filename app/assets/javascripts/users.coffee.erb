Views.users =
  _: ->
  stats: ->
    drawgraph = (target, data, jump) ->
      radius = document.querySelector(target + " .chart").offsetWidth / 2
      iconSize = 48
      colors = d3.scale.category20b().range()

      svg = d3.select(target + " .chart")
              .attr("width", radius * 2).attr("height", radius * 2)

      g = svg.append("g")
            .attr("transform", "translate(" + radius + "," + radius + ")")
      g.append("g").attr("class", "slices")
      g.append("g").attr("class", "lines")
      g.append("g").attr("class", "labels")
      g.append("g").attr("class", "images")

      pie = d3.layout.pie()
        .value((d) -> d.count)

      arc = d3.svg.arc()
        .outerRadius(radius * 0.7)
        .innerRadius(radius * 0.3)

      innerArc = d3.svg.arc()
        .innerRadius(radius * 0.45)
        .outerRadius(radius * 0.45)

      outerArc = d3.svg.arc()
        .innerRadius(radius * 0.8)
        .outerRadius(radius * 0.8)

      slice = g.select(".slices").selectAll("path.slice").data(pie(data))
      slice.enter()
        .insert("path")
        .style("fill", (d) -> colors[data.indexOf(d.data) % colors.length])
        .attr("class", "slice")
      slice.transition().attrTween "d", (d) ->
        interpolate = d3.interpolate(d, d)
        (t) ->
          arc(interpolate(t))
      slice.exit().remove()

      polyline = g.select(".lines").selectAll("polyline").data(pie(data))
      polyline.enter()
        .append("polyline")
      polyline.transition().attrTween "points", (d) ->
        interpolate = d3.interpolate(d, d)
        (t) ->
          d2 = interpolate(t)
          [arc.centroid(d2), outerArc.centroid(d2)]
      polyline.exit().remove()

      text = g.select(".labels").selectAll("text").data(pie(data))
      text.enter()
        .append("text")
        .style("fill", "white")
        .attr("color", "white")
        .style("text-anchor", "middle")
        .style("dominant-baseline", "middle")
        .text((d) -> d.data.count)
      text.transition().attrTween "transform", (d) ->
        interpolate = d3.interpolate(d, d)
        (t) ->
          d2 = interpolate(t)
          pos = innerArc.centroid(d2)
          "translate(" + pos + ")"
      text.exit().remove()

      img = g.select(".images").selectAll("image").data(pie(data))
      img.enter()
        .append("image")
        .attr("xlink:href", (d) -> d.data.profile_image_url)
        .attr("width", iconSize).attr("height", iconSize)
        .on "click", (d) ->
          jump(d.data)
      img.transition().attrTween "transform", (d) ->
        interpolate = d3.interpolate(d, d)
        (t) ->
          d2 = interpolate(t)
          pos = outerArc.centroid(d2)
          pos[0] -= iconSize / 2
          pos[1] -= iconSize / 2
          "translate(" + pos + ")"
      img.exit().remove()
    l = window.location
    superagent
      .get(l.protocol + "//" + l.host + l.pathname.replace(/(\.\w+)?$/, ".json") + l.search)
      .accept "json"
      .end (err, res) ->
        json = res.body
        drawgraph "#discovered_by", json.discovered_by, (u) ->
          window.location = "/" + Helpers.user_screen_name() + "/favorited_by/" + u.screen_name
        drawgraph "#discovered_users", json.discovered_users, (u) ->
          window.location = "/" + u.screen_name + "/favorited_by/" + Helpers.user_screen_name()
